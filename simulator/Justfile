# BitChat Simulator Test Runner
# Extended with critical test scenarios

# Build all simulator components
build:
    cd scenario-runner && cargo build --release

# Run all critical test scenarios with event-driven orchestrator
test-critical: build
    ./scenario-runner/target/release/bitchat-scenario-runner run-suite critical

# Run security-critical scenarios only
test-security: build
    ./scenario-runner/target/release/test_runner run-suite security

# Run robustness scenarios only  
test-robustness: build
    ./scenario-runner/target/release/test_runner run-suite robustness

# Run all test scenarios (existing + critical)
test-all: build
    ./scenario-runner/target/release/test_runner run-suite all

# Individual critical scenario tests
test-transport-failover: build
    ./scenario-runner/target/release/test_runner run transport-failover-recovery

test-session-rekey: build
    ./scenario-runner/target/release/test_runner run session-rekey-under-load

test-byzantine-fault: build
    ./scenario-runner/target/release/test_runner run byzantine-fault-tolerance

test-panic-recovery: build
    ./scenario-runner/target/release/test_runner run panic-action-recovery

test-mesh-partition: build
    ./scenario-runner/target/release/test_runner run mesh-partition-healing

test-file-transfer-resume: build
    ./scenario-runner/target/release/test_runner run file-transfer-interruption-resume

test-version-compatibility: build
    ./scenario-runner/target/release/test_runner run protocol-version-compatibility

test-peer-scaling: build
    ./scenario-runner/target/release/test_runner run massive-peer-discovery-scaling

# Legacy test commands (existing)
test: build
    ./scenario-runner/target/release/test_runner run-basic-test

run-basic-test: build
    ./scenario-runner/target/release/test_runner basic-send-receive

run-rust-client-test: build
    cd ../crates/bitchat-cli && cargo run -- --test-mode

run-swift-client-test: build
    cd clients/swift-cli && ./swift_test_wrapper.sh

run-kotlin-client-test: build  
    cd clients/kotlin-cli && ./kotlin_test_wrapper.sh

# Continuous testing with file watching
watch-test-critical:
    watchexec -e rs,toml "just test-critical"

watch-test-security:
    watchexec -e rs,toml "just test-security"

# Generate test reports
test-report: test-all
    ./scenario-runner/target/release/test_runner generate-report --output test_results.html

# Clean simulator artifacts
clean:
    cargo clean
    cd scenario-runner && cargo clean
    rm -rf test_results.html logs/

# Development helpers
status:
    ./scenario-runner/target/release/test_runner status

logs:
    tail -f logs/test_runner.log

# Benchmark critical scenarios
bench-critical: build
    ./scenario-runner/target/release/test_runner benchmark critical

# Stress test specific scenarios
stress-transport-failover: build
    ./scenario-runner/target/release/test_runner stress transport-failover-recovery --iterations 100

stress-session-rekey: build  
    ./scenario-runner/target/release/test_runner stress session-rekey-under-load --load-factor 10

stress-mesh-partition: build
    ./scenario-runner/target/release/test_runner stress mesh-partition-healing --nodes 20

# Network simulation modes
test-lossy-network: build
    ./scenario-runner/target/release/test_runner run-suite critical --network-loss 0.1

test-high-latency: build
    ./scenario-runner/target/release/test_runner run-suite critical --network-latency 500ms

test-bandwidth-limited: build
    ./scenario-runner/target/release/test_runner run-suite critical --bandwidth-limit 56kbps