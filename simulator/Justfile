# BitChat Simulator - Unified Test Interface
#
# This Justfile provides a unified interface for testing BitChat scenarios
# across different client types and automatically routes to the appropriate
# testing system (virtual for CLI/WASM, device for iOS/Android).

# ============================================================================
# Default Recipe
# ============================================================================

# Default target shows help
default:
    just help

# ============================================================================
# Unified Test Interface
# ============================================================================

# Run a scenario with specific client types
# Automatically routes to virtual (cli,wasm) or device (ios,android) testing
# Usage: just test-scenario SCENARIO CLIENT1,CLIENT2
# Clients: cli, wasm, ios, android
test-scenario scenario clients:
    #!/usr/bin/env bash
    set -euo pipefail
    
    # Parse client types
    IFS=',' read -ra CLIENT_ARRAY <<< "{{clients}}"
    CLIENT1="${CLIENT_ARRAY[0]}"
    CLIENT2="${CLIENT_ARRAY[1]:-$CLIENT1}"  # Default to same client if only one provided
    
    # Determine which testing system to use
    VIRTUAL_CLIENTS="cli wasm"
    DEVICE_CLIENTS="ios android"
    
    USE_VIRTUAL=false
    USE_DEVICE=false
    
    # Check client1
    if [[ " $VIRTUAL_CLIENTS " =~ " $CLIENT1 " ]]; then
        USE_VIRTUAL=true
    elif [[ " $DEVICE_CLIENTS " =~ " $CLIENT1 " ]]; then
        USE_DEVICE=true
    else
        echo "Error: Unknown client type '$CLIENT1'"
        echo "Valid clients: cli, wasm, ios, android"
        exit 1
    fi
    
    # Check client2
    if [[ " $VIRTUAL_CLIENTS " =~ " $CLIENT2 " ]]; then
        if [ "$USE_DEVICE" = true ]; then
            echo "Error: Cannot mix virtual clients ($CLIENT2) with device clients ($CLIENT1)"
            echo "Virtual clients: cli, wasm"
            echo "Device clients: ios, android"
            exit 1
        fi
        USE_VIRTUAL=true
    elif [[ " $DEVICE_CLIENTS " =~ " $CLIENT2 " ]]; then
        if [ "$USE_VIRTUAL" = true ]; then
            echo "Error: Cannot mix device clients ($CLIENT2) with virtual clients ($CLIENT1)"
            echo "Virtual clients: cli, wasm"
            echo "Device clients: ios, android"
            exit 1
        fi
        USE_DEVICE=true
    else
        echo "Error: Unknown client type '$CLIENT2'"
        echo "Valid clients: cli, wasm, ios, android"
        exit 1
    fi
    
    # Route to appropriate testing system
    if [ "$USE_VIRTUAL" = true ]; then
        echo "Running scenario {{scenario}} with virtual clients: {{clients}}"
        echo "   Using fast simulation (seconds)..."
        cd virtual && nix develop --quiet --command cargo run --release -- execute ../scenarios/{{scenario}}.toml
    elif [ "$USE_DEVICE" = true ]; then
        echo "Running scenario {{scenario}} with device clients: {{clients}}"
        echo "   Using real-world testing (minutes)..."
        cd device && nix develop --quiet --command cargo run --release --quiet -- execute --clients {{clients}} ../scenarios/{{scenario}}.toml
    else
        echo "Error: Could not determine testing system"
        exit 1
    fi

# ============================================================================
# Scenario Management
# ============================================================================

# List all available scenarios
list-scenarios:
    @echo "Available Scenarios:"
    @echo "==================="
    @ls scenarios/*.toml | sed 's/scenarios\///' | sed 's/\.toml//'

# Create a new scenario from template
new-scenario name:
    @echo "Creating new scenario: {{name}}"
    @cp scenarios/02_messaging_basic.toml scenarios/{{name}}.toml
    @echo "Edit scenarios/{{name}}.toml to customize your test"

# Run development workflow for a scenario (fast simulation, then device verification)
dev-cycle scenario:
    @echo "Development Cycle for {{scenario}}"
    @echo "================================="
    @echo ""
    @echo "1/3 Fast simulation test..."
    just test-scenario {{scenario}} cli,cli
    @echo ""
    @echo "2/3 Real-world verification..." 
    just test-scenario {{scenario}} ios,ios
    @echo ""
    @echo "3/3 Development cycle complete!"

# ============================================================================
# Build System
# ============================================================================

# Build all components needed for testing
build:
    @echo "Building virtual testing system..."
    cd virtual && nix develop --quiet --command cargo build --release
    @echo "Building device testing system..."
    cd device && nix develop --quiet --command just build-apps

# Build only virtual testing system (for CLI/WASM simulation)
build-virtual:
    cd virtual && nix develop --quiet --command cargo build --release

# Build only device testing system (for iOS/Android real-world testing)
build-device:
    cd device && nix develop --quiet --command just build-apps

# ============================================================================
# Environment Setup
# ============================================================================

# Check if environment is ready for virtual testing
check-virtual:
    @echo "Checking virtual testing environment..."
    cd virtual && nix develop --quiet --command cargo check

# Check if environment is ready for device testing  
check-device:
    @echo "Checking device testing environment..."
    cd device && nix develop --quiet --command just check-env

# Check both environments
check-all: check-virtual check-device

# ============================================================================
# Testing Workflows
# ============================================================================

# Run a scenario across multiple client combinations for comprehensive testing
test-matrix scenario:
    @echo "Running test matrix for {{scenario}}"
    @echo "==================================="
    @echo ""
    @echo "Virtual Tests (fast):"
    just test-scenario {{scenario}} cli,cli
    just test-scenario {{scenario}} wasm,wasm  
    just test-scenario {{scenario}} cli,wasm
    @echo ""
    @echo "Device Tests (real-world):"
    just test-scenario {{scenario}} ios,ios
    just test-scenario {{scenario}} android,android
    just test-scenario {{scenario}} ios,android
    @echo ""
    @echo "Test matrix complete!"

# Run smoke tests across all client types
smoke-test:
    @echo "Running smoke tests..."
    just test-scenario 02_messaging_basic cli,cli
    just test-scenario 02_messaging_basic ios,ios

# ============================================================================
# Cleanup
# ============================================================================

# Clean all build artifacts
clean:
    @echo "Cleaning all simulator artifacts..."
    cd virtual && nix develop --quiet --command cargo clean
    cd device && nix develop --quiet --command just clean
    @echo "All artifacts cleaned"

# ============================================================================
# Help and Documentation  
# ============================================================================

# Show the unified interface
help:
    @echo "BitChat Simulator - Unified Test Interface"
    @echo "==========================================="
    @echo ""
    @echo "Main Command:"
    @echo "  just test-scenario SCENARIO CLIENT1,CLIENT2"
    @echo ""
    @echo "Client Types:"
    @echo "  cli     - Command-line simulation client"
    @echo "  wasm    - WebAssembly browser client"
    @echo "  ios     - iOS simulator/device"
    @echo "  android - Android emulator/device"
    @echo ""
    @echo "Examples:"
    @echo "  just test-scenario 02_messaging_basic cli,cli        # Fast protocol test"
    @echo "  just test-scenario 02_messaging_basic ios,android    # Real cross-platform test"
    @echo "  just test-scenario 01_discovery_basic wasm,wasm      # Browser environment test"
    @echo "  just test-scenario 03_integration_comprehensive android,android"
    @echo ""
    @echo "Development Workflows:"
    @echo "  just dev-cycle SCENARIO      - Run scenario in simulation, then devices"
    @echo "  just test-matrix SCENARIO    - Test across all client combinations"
    @echo "  just smoke-test             - Quick health check"
    @echo ""
    @echo "Scenario Management:"
    @echo "  just list-scenarios         - List all available scenarios"
    @echo "  just new-scenario NAME       - Create new scenario from template"
    @echo ""
    @echo "Environment:"
    @echo "  just build                  - Build all testing systems"
    @echo "  just check-all             - Verify both environments ready"
    @echo "  just build-virtual         - Build only simulation system"
    @echo "  just build-device          - Build only device testing system"
    @echo ""
    @echo "System Routing:"
    @echo "  Virtual (cli,wasm)    → Fast simulation testing (seconds)"
    @echo "  Device (ios,android)  → Real-world E2E testing (minutes)"
    @echo ""
    @echo "Documentation:"
    @echo "  See simulator/ARCHITECTURE.md for detailed architecture"
    @echo "  See scenarios/ directory for example TOML files"

# ============================================================================
# Internal Targets (CI/CD)
# ============================================================================

# Run all scenarios in virtual mode (for CI/CD)
_ci-virtual:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "Running all scenarios in virtual mode..."
    for scenario in scenarios/*.toml; do
        name=$(basename "$scenario" .toml)
        echo "Testing $name..."
        just test-scenario "$name" cli,cli || echo "$name failed"
    done

# Run smoke test across both systems (for CI/CD)  
_ci-smoke:
    @echo "Running CI smoke tests..."
    just test-scenario 02_messaging_basic cli,cli
    just test-scenario 02_messaging_basic ios,ios