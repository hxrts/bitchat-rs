[package]
name = "bitchat-core"
version = "0.1.0"
edition = "2021"
description = "Core protocol implementation for the BitChat P2P messaging protocol"
license = "MIT OR Apache-2.0"

[features]
# Default feature depends on target platform
default = []

# Standard library environments (CLI, server, native)
std = [
    "serde/std",
    "ed25519-dalek/std", 
    "sha2/std",
    "uuid/std",
    "tokio",
    "tracing",
    "instant",
    "geohash",
    "task-logging",
    "monitoring",
    "flate2"
]

# WebAssembly browser environments  
wasm = [
    "async-channel",
    "wasm-bindgen-futures", 
    "async-broadcast",
    "instant", 
    "js-sys",
    "flate2"
]

# Testing environments with additional utilities
testing = [
    "std",
    "task-logging", 
    "monitoring"
]

# QR-based peer verification (Tier 1 feature)
qr-verification = ["qr-generation"]

# Experimental features (not in canonical implementation)
# Includes: file transfer, group messaging, multi-device sync, capability negotiation
experimental = []

# QR code generation for peer verification
qr-generation = ["qrcode"]
qr-png = ["qr-generation", "qrcode/image"]

# Internal feature flags (not for external use)
task-logging = ["tracing"]
monitoring = ["tracing"]

[dependencies]
# Core serialization
serde = { workspace = true }
bincode = { workspace = true }

# Cryptography (WASM-compatible, no_std)
snow = { workspace = true }
curve25519-dalek = { workspace = true }
ed25519-dalek = { workspace = true }
x25519-dalek = { workspace = true }
chacha20poly1305 = { workspace = true }
aes-gcm = { version = "0.10", default-features = false, features = ["alloc"] }
sha2 = { workspace = true }

# Utilities
uuid = { workspace = true }
thiserror = { workspace = true }
rand_core = { workspace = true }
crc32fast = { workspace = true }
async-trait = { version = "0.1", default-features = false }
async-broadcast = { version = "0.5", optional = true }
cfg-if = "1.0"
flate2 = { version = "1.0", default-features = false, features = ["rust_backend"], optional = true }

# Async runtime and channels (feature-gated)
tokio = { version = "1.0", features = ["sync", "time", "rt", "macros"], optional = true }
futures-channel = { version = "0.3", optional = true, default-features = false, features = ["alloc", "sink"] }
async-channel = { version = "2.3", optional = true, default-features = false }

# Logging (always available, but tracing is feature-gated)
log = { version = "0.4", default-features = false }
tracing = { version = "0.1", default-features = false, optional = true }

# Core futures support (always available)
futures = { version = "0.3", default-features = false, features = ["alloc"] }

# WASM-specific dependencies (optional, enabled by wasm feature)
wasm-bindgen-futures = { version = "0.4", optional = true }
js-sys = { version = "0.3", optional = true }

# Performance optimizations
hex = { workspace = true }
hashbrown = { workspace = true }
smallvec = { workspace = true }
instant = { workspace = true, optional = true }

# Geolocation support (std only)
geohash = { workspace = true, optional = true }

# QR code generation (optional)
qrcode = { version = "0.13", default-features = false, optional = true }
base64 = { version = "0.22", default-features = false, features = ["alloc"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { workspace = true }

[dev-dependencies]
tokio = { version = "1.0", features = ["full"] }
rand_chacha = "0.3"
futures = "0.3"
proptest = "1.5"
